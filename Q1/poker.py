import cv2import Imageimport numpyfrom datetime import datetime from matplotlib import pyplot as plt#resize arg:#size = (640,480)    def imshow(im):    cv2.namedWindow('Display Window')        ## create window for display    cv2.imshow('Display Window',im)          ## Show image in the window    print "size of image: ",im.shape         ## print size of image    cv2.waitKey(0)                           ## Wait for keystroke    cv2.destroyAllWindows()                  ## Destroy all windows#source : http://stackoverflow.com/questions/11764575/python-2-7-3-opencv-2-4-after-rotation-window-doesnt-fit-image    def rotateImage(image, angel):#parameter angel in degrees    height = image.shape[0]    width = image.shape[1]    height_big = height * 2    width_big = width * 2    image_big = cv2.resize(image, (width_big, height_big))    image_center = (width_big/2, height_big/2)#rotation center    rot_mat = cv2.getRotationMatrix2D(image_center,angel, 0.5)    result = cv2.warpAffine(image_big, rot_mat, (width_big, height_big), flags=cv2.INTER_LINEAR)    return result  #VideoCapture : http://docs.opencv.org/modules/highgui/doc/reading_and_writing_images_and_video.html#videocapturecamera_port = 0camera = cv2.VideoCapture(camera_port)if not camera.isOpened():    print "Cannot open camera!"else:    starttime = datetime.now()     #print 'start  time   : ' + str(starttime)         #retval, im = camera.read()    retval, im = camera.retrieve()    file = "image.jpg"    cv2.imwrite(file, im)    #im = array2PIL(im,size)    endtime = datetime.now()    #print 'end  time   : ' + str(endtime)     print 'get image from USB cam (time) : ' + str(endtime - starttime)    del(camera)    starttime = datetime.now()     #threshold start        #cv2.imread(filename[, flags]) -> retval    #flags :     #   >0 Return a 3-channel color image.    #       Note In the current implementation the alpha channel, if any, is stripped from the output image. Use negative value if you need the alpha channel.    #   =0 Return a grayscale image.    #   <0 Return the loaded image as is (with alpha channel).    #img = cv2.imread('image.jpg',0)    img = cv2.cvtColor(im,cv2.COLOR_RGB2GRAY)        #filter methods :     #   tutorial : http://opencvpython.blogspot.tw/2012/06/smoothing-techniques-in-opencv.html    #   api : http://docs.opencv.org/modules/imgproc/doc/filtering.html    #    #   Homogeneous Blur, cv2.blur() : http://docs.opencv.org/modules/imgproc/doc/filtering.html#blur    #   Gaussian Blur , cv2.GaussianBlur(): http://docs.opencv.org/modules/imgproc/doc/filtering.html#gaussianblur    #   median blur, cv2.medianBlur() : http://docs.opencv.org/modules/imgproc/doc/filtering.html#medianblur    #   bilateral filter, cv2.bilateralFilter() : http://docs.opencv.org/modules/imgproc/doc/filtering.html#bilateralfilter    img = cv2.medianBlur(img,5)    #adaptive threshold : http://docs.opencv.org/modules/imgproc/doc/miscellaneous_transformations.html#adaptivethreshold    th3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\                cv2.THRESH_BINARY,11,2)    cv2.imwrite('th3.jpg', th3)    imageRotated = rotateImage(th3, 45)    cv2.imwrite('th3r45.jpg', imageRotated )    endtime = datetime.now()    #print 'end  time   : ' + str(endtime)     print 'process time : ' + str(endtime - starttime)