import cv2import Imageimport numpyfrom datetime import datetime from matplotlib import pyplot as plt#resize arg:#size = (640,480)#canny arg:lowThreshold = 0max_lowThreshold = 100ratio = 3kernel_size = 3def array2PIL(arr, size):    mode = 'RGBA'    arr = arr.reshape(arr.shape[0]*arr.shape[1], arr.shape[2])    if len(arr[0]) == 3:        arr = numpy.c_[arr, 255*numpy.ones((len(arr),1), numpy.uint8)]    return Image.frombuffer(mode, size, arr.tostring(), 'raw', mode, 0, 1)    def imshow(im):    cv2.namedWindow('Display Window')        ## create window for display    cv2.imshow('Display Window',im)          ## Show image in the window    print "size of image: ",im.shape         ## print size of image    cv2.waitKey(0)                           ## Wait for keystroke    cv2.destroyAllWindows()                  ## Destroy all windowsdef CannyThreshold(lowThreshold):    detected_edges = cv2.GaussianBlur(gray,(3,3),0)    detected_edges = cv2.Canny(detected_edges,lowThreshold,lowThreshold*ratio,apertureSize = kernel_size)    dst = cv2.bitwise_and(im,im,mask = detected_edges)  # just add some colours to edges from original image.    #cv2.imshow('canny demo',dst)    return dstcamera_port = 0camera = cv2.VideoCapture(camera_port)starttime = datetime.now() print 'start  time   : ' + str(starttime) retval, im = camera.read()file = "image.jpg"cv2.imwrite(file, im)#im = array2PIL(im,size)endtime = datetime.now()print 'end  time   : ' + str(endtime) print 'total  time   : ' + str(endtime - starttime)del(camera)#canny startgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)cv2.namedWindow('canny demo')canny = CannyThreshold(30)  # initialization#cv2.createTrackbar('Min threshold','canny demo',lowThreshold, max_lowThreshold, CannyThreshold)#if cv2.waitKey(0) == 27:    #cv2.destroyAllWindows()cv2.imwrite('canny.jpg', canny)#threshold startimg = cv2.imread('image.jpg',0)img = cv2.medianBlur(img,5)ret,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)th2 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_MEAN_C,\            cv2.THRESH_BINARY,11,2)th3 = cv2.adaptiveThreshold(img,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,\            cv2.THRESH_BINARY,11,2)plt.subplot(2,2,1),plt.imshow(img,'gray')plt.title('input image')plt.subplot(2,2,2),plt.imshow(th1,'gray')plt.title('Global Thresholding')plt.subplot(2,2,3),plt.imshow(th2,'gray')plt.title('Adaptive Mean Thresholding')plt.subplot(2,2,4),plt.imshow(th3,'gray')plt.title('Adaptive Gaussian Thresholding')cv2.imwrite('th3.jpg', th3)#plt.show()